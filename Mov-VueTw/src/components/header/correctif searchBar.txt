mon composant entier peux tu me la simplifier en corrigeant la connexion / déconnexion (l'onglet connexion n'apparait plus apres que je que déconnecte bien que je sois redirigé vers le login, je désire etre redirigé vers l'accueil) et le Profil avec un point vers apparait malgré la déconnexion. j'aimerais faire apparaitre cette bille verte (état de connexion) sur l'avatar de profil (vert quand connecté et rouge sinon) et que tout fonctionne convenablement en restant simple en OptionAPI de VueJs3 ?


Pour simplifier et corriger votre composant en utilisant l'Option API de Vue.js 3, nous allons nous concentrer sur les points suivants :

1. **Gestion correcte de l'état de connexion et déconnexion**.
2. **Affichage conditionnel du menu et des boutons en fonction de l'état de connexion**.
3. **Redirection après déconnexion vers l'accueil**.
4. **Affichage de l'état de connexion (bille verte ou rouge) sur l'avatar**.

Voici le composant mis à jour :

### Composant Vue.js

```vue
<template>
  <div class="relative mt-5 size-fit flex relative z-50" @click.stop>
    <input
      type="text"
      placeholder="Rechercher un Film, une série..."
      class="rounded-full bg-green-800 focus:shadow w-96 pl-7"
      @input="debouncingSearch"
      v-model="searchTerm"
      @blur="handleBlur"
    />
    <div class="absolute top-5">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        stroke-width="1.5"
        stroke="currentColor"
        class="w-7 h-7 text-yellow-200"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z"
        />
      </svg>
    </div>

    <div
      class="absolute mt-16 ml-3 bg-green-800 rounded w-9/12"
      v-if="showSearchResults"
      @mousedown="prevent"
    >
      <ul class="mt-3" v-if="searchResult.length !== 0">
        <li
          v-for="(multi, index) in searchResult"
          :key="index"
          class="flex items-center border-b-2 border-yellow-300 p-1"
        >
          <router-link :to="getDetailsRoute(multi)" class="">
            <img
              :src="videoImages(multi.poster_path)"
              :alt="multi.title || multi.original_name"
              class="w-28 p-1"
            />
            <span class="font-serif text-lg text-center">
              {{ multi.title || multi.original_name }}
            </span>
          </router-link>
        </li>
      </ul>
      <ul class="px-3">
        <li v-if="noResultFound">no result found for {{ searchTerm }}</li>
      </ul>
    </div>

    <div class="relative">
      <div class="flex items-center cursor-pointer" @click="toggleMenu">
        <img
          :src="userProfilePicture"
          alt="avatar de profil"
          class="size-16 rounded-full mr-5 ml-12"
        />
        <span :class="{'bg-green-500': isAuthenticated, 'bg-red-500': !isAuthenticated}" class="w-3 h-3 rounded-full"></span>
      </div>
      <div v-if="showMenu" class="absolute right-0 bg-white rounded shadow-lg py-2 w-48">
        <div v-if="isAuthenticated">
          <router-link to="/profile" class="block w-full text-left px-4 py-2 text-gray-800 hover:bg-gray-100">
            <span class="flex items-center">
              <span class="mr-2">Profil</span>
              <span class="w-2 h-2 bg-green-500 rounded-full"></span>
            </span>
          </router-link>
          <button @click="logout" class="block w-full text-left px-4 py-2 text-gray-800 hover:bg-gray-100">
            Déconnexion
          </button>
        </div>
        <div v-else>
          <router-link to="/login" class="block w-full text-left px-4 py-2 text-gray-800 hover:bg-gray-100">
            Connexion
          </router-link>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import requete from '../../service/api'
import { useFacticeUserStore } from '@/stores/facticeUserStore'
import { computed } from 'vue'

export default {
  data() {
    return {
      searchResult: [],
      noResultFound: false,
      searchTerm: '',
      showSearchResults: false,
      showMenu: false,
      debounce: null,
    }
  },
  setup() {
    const userStore = useFacticeUserStore();
    const isAuthenticated = computed(() => userStore.currentUser !== null);
    const userProfilePicture = computed(() => userStore.userProfilePicture || '../../assets/Goku-Dragon.webp');

    return {
      isAuthenticated,
      userProfilePicture,
      userStore,
    };
  },
  methods: {
    debouncingSearch(event) {
      clearTimeout(this.debounce);
      this.debounce = setTimeout(() => {
        if (event.target.value.length > 2) {
          this.fetchSearch(event.target.value);
          this.showSearchResults = true;
        } else {
          this.searchResult = [];
          this.noResultFound = false;
          this.showSearchResults = false;
        }
      }, 600);
    },
    async fetchSearch(term) {
      try {
        const response = await requete('/search/multi?query=' + term);
        this.searchResult = response.data.results;
        this.noResultFound = response.data.results.length === 0;
      } catch (error) {
        console.log(error);
      }
    },
    videoImages(poster_path) {
      return poster_path
        ? 'https://image.tmdb.org/t/p/original/' + poster_path
        : 'https://static.vecteezy.com/system/resources/previews/005/337/799/original/icon-image-not-found-free-vector.jpg';
    },
    closeSearch() {
      this.showSearchResults = false;
    },
    handleBlur() {
      setTimeout(() => {
        this.closeSearch();
      }, 300);
    },
    getDetailsRoute(multi) {
      const mediaType = multi.media_type;
      const id = multi.id;

      if (mediaType === 'tv') {
        return { name: 'filmDetails', params: { magicRoute: 'series', id } };
      } else if (mediaType === 'movie') {
        return { name: 'filmDetails', params: { magicRoute: 'films', id } };
      } else {
        return { name: 'filmDetails', params: { magicRoute: 'other', id } };
      }
    },
    toggleMenu() {
      this.showMenu = !this.showMenu;
    },
    logout() {
      this.userStore.logout();
      this.$router.push({ name: 'home' });
    },
  },
};
</script>

<style lang="scss" scoped></style>
```

### Modifications clés :

1. **Vérification de l'authentification** :
   - `isAuthenticated` est mis à jour pour vérifier si `currentUser` n'est pas nul.

2. **Redirection après déconnexion** :
   - La redirection utilise `this.$router.push` pour rediriger vers l'accueil après la déconnexion.

3. **Affichage du menu de connexion/déconnexion** :
   - Le menu s'affiche en fonction de l'état de connexion.
   - `toggleMenu` bascule l'affichage du menu.
   - `logout` appelle `userStore.logout` et redirige vers l'accueil.

4. **Affichage de l'état de connexion sur l'avatar** :
   - Une petite bille verte (connecté) ou rouge (non connecté) est ajoutée à côté de l'avatar pour indiquer l'état de connexion.

Avec ces ajustements, votre composant devrait fonctionner correctement pour la connexion et la déconnexion, en affichant correctement les éléments de l'interface utilisateur en fonction de l'état de connexion.